---
compose_path: /srv
appdata_path: "{{ compose_path }}"
docker_up_command: docker compose pull && docker compose up -d
docker_update_command: docker compose pull && docker compose down --remove-orphans && docker compose rm && docker compose up -d
docker_cleanup_command: docker image prune -f && docker volume prune -f

global_env_vars:
  - PUID={{ current_user.uid }}
  - PGID={{ current_user.uid }}
  - TZ=Europe/Vienna

containers:
  - name: grafana
    enabled_on: monitoring
    image: grafana/grafana:9.5.3
    volumes:
      - "{{ appdata_path }}/grafana:/var/lib/grafana"
    user: "{{ current_user.uid  }}"
    ports:
      - 3000:3000
    mem_limit: 128m

  - name: prometheus
    enabled_on: monitoring
    image: prom/prometheus:v2.44.0
    volumes:
      - "{{ appdata_path }}/prometheus/config:/etc/prometheus"
      - "{{ appdata_path }}/prometheus/data:/prometheus"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    user: "{{ current_user.uid }}"
    ports:
      - 9090:9090
    mem_limit: 512m

  - name: alertmanager
    enabled_on: monitoring
    image: prom/alertmanager:v0.25.0
    volumes:
      - "{{ appdata_path }}/alertmanager:/etc/alertmanager"
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    ports:
      - 9093:9093
    mem_limit: 32m

  - name: alertmanager-discord
    enabled_on: monitoring
    image: benjojo/alertmanager-discord:latest
    environment:
      - DISCORD_WEBHOOK={{ secret_alertmanager_discord_webhook }}
    mem_limit: 8m

  - name: influxdb2
    enabled_on: monitoring
    image: influxdb:2.7.1-alpine
    volumes:
      - "{{ appdata_path }}/influxdb2/config:/etc/influxdb2"
      - "{{ appdata_path }}/influxdb2/data:/var/lib/influxdb2"
    ports:
      - 8086:8086
    mem_limit: 256m

  - name: nodeexporter
    image: prom/node-exporter:v1.6.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - 9100:9100
    prometheus_scrape: true
    mem_limit: 16m

  - name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    privileged: "{{ (ansible_hostname == 'docker') | ternary('false', 'true') }}"
    # devices:
    #   - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - 8081:8080
    prometheus_scrape: true
    mem_limit: 128m

  - name: flame
    enabled_on: docker
    image: pawelmalak/flame:2.3.0
    volumes:
      - "{{ appdata_path }}/flame:/app/data"
    ports:
      - 5005:5005
    environment:
      - PASSWORD={{ secret_flame_password }}
    mem_limit: 128m

  - name: flame-ts
    enabled_on: docker
    image: pawelmalak/flame:2.3.0
    volumes:
      - "{{ appdata_path }}/flame-ts:/app/data"
    ports:
      - 5006:5005
    environment:
      - PASSWORD={{ secret_flame_password }}
    mem_limit: 128m

  - name: qbittorrent
    enabled_on: docker
    image: cr.hotio.dev/hotio/qbittorrent:release-4.5.0
    ports:
      - 8080:8080
      - 8118:8118
    environment:
      - UMASK=022
      - VPN_ENABLED=true
      - VPN_LAN_NETWORK={{ secret_wireguard_lan_network }}
      - VPN_CONF=wg0
      - VPN_ADDITIONAL_PORTS
      - VPN_IP_CHECK_DELAY=5
      - VPN_IP_CHECK_EXIT=true
      - PRIVOXY_ENABLED=false
    volumes:
      - "{{ appdata_path }}/qbittorrent:/config"
      - /mnt/data/torrents:/data/torrents
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=1
    mem_limit: 4096m

  - name: radarr
    enabled_on: docker
    image: lscr.io/linuxserver/radarr:4.5.2
    volumes:
      - "{{ appdata_path }}/radarr:/config"
      - /mnt/data:/data
    ports:
      - 7878:7878
    mem_limit: 512m

  - name: sonarr
    enabled_on: docker
    image: lscr.io/linuxserver/sonarr:3.0.10
    volumes:
      - "{{ appdata_path }}/sonarr:/config"
      - /mnt/data:/data
    ports:
      - 8989:8989
    mem_limit: 512m

  - name: sonarr-anime
    enabled_on: docker
    image: lscr.io/linuxserver/sonarr:3.0.10
    volumes:
      - "{{ appdata_path }}/sonarr-anime:/config"
      - /mnt/data:/data
    ports:
      - 9898:8989
    mem_limit: 1024m

  - name: prowlarr
    enabled_on: docker
    image: lscr.io/linuxserver/prowlarr:1.6.0-develop
    volumes:
      - "{{ appdata_path }}/prowlarr:/config"
    ports:
      - 9696:9696
    mem_limit: 1024m

  - name: recyclarr
    enabled_on: docker
    image: ghcr.io/recyclarr/recyclarr:4.4.1
    volumes:
      - "{{ appdata_path }}/recyclarr:/config"
    mem_limit: 128m

  - name: sabnzbd
    enabled_on: docker
    image: lscr.io/linuxserver/sabnzbd:4.0.2
    ports:
      - 8082:8080
    volumes:
      - "{{ appdata_path }}/sabnzbd:/config"
      - /mnt/data/usenet:/data/usenet
    mem_limit: 1024m

  - name: renovate
    enabled_on: docker
    image: renovate/renovate:35.115.2
    environment:
      - RENOVATE_CONFIG_FILE=/config/config.json
    volumes:
      - "{{ appdata_path }}/renovate:/config"
    restart: on-failure
    mem_limit: 2048m

  - name: fireflyiii
    enabled_on: docker
    image: fireflyiii/core:version-5.7.17
    depends_on:
      - postgres-fireflyiii
    ports:
      - 8083:8080
    environment:
      - APP_KEY={{ secret_fireflyiii_app_key }}
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres-fireflyiii
      - DB_PORT=5432
      - DB_DATABASE=firefly
      - DB_USERNAME=firefly
      - DB_PASSWORD={{ secret_postgres_fireflyiii_password }}
    volumes:
      - "{{ appdata_path }}/fireflyiii:/var/www/html/storage/upload"
    mem_limit: 256m

  - name: postgres-fireflyiii
    enabled_on: docker
    image: postgres:15.3-alpine
    environment:
      - POSTGRES_PASSWORD={{ secret_postgres_fireflyiii_password }}
      - POSTGRES_USER=firefly
      - POSTGRES_DB=firefly
    volumes:
      - "{{ appdata_path }}/postgres-fireflyiii:/var/lib/postgresql/data"
    mem_limit: 256m

  - name: plex
    enabled_on: docker
    image: ghcr.io/linuxserver/plex:1.32.3
    environment:
      - VERSION=docker
      - DOCKER_MODS=linuxserver/mods:plex-absolute-hama
    ports:
      - 32400:32400
    volumes:
      - "{{ appdata_path }}/plex:/config"
      - /mnt/data/media:/data/media
      - /tmp/plex:/transcode
    devices:
      - /dev/dri:/dev/dri
    mem_limit: 8192m

  - name: overseerr
    enabled_on: docker
    image: lscr.io/linuxserver/overseerr:1.32.5
    volumes:
      - "{{ appdata_path }}/overseerr:/config"
    ports:
      - 5055:5055
    mem_limit: 512m

  - name: lidarr
    enabled_on: docker
    image: lscr.io/linuxserver/lidarr:1.1.4
    volumes:
      - "{{ appdata_path }}/lidarr:/config"
      - /mnt/data:/data
    ports:
      - 8686:8686
    mem_limit: 1024m

  - name: vikunja-api
    enabled_on: docker
    image: vikunja/api:0.20.4
    depends_on:
      - postgres-vikunja
    volumes:
      - "{{ appdata_path }}/vikunja-api:/app/vikunja/files"
    environment:
      - VIKUNJA_DATABASE_HOST=postgres-vikunja
      - VIKUNJA_DATABASE_PASSWORD={{ secret_postgres_vikunja_password }}
      - VIKUNJA_DATABASE_TYPE=postgres
      - VIKUNJA_DATABASE_USER=vikunja
      - VIKUNJA_DATABASE_DATABASE=vikunja
      - VIKUNJA_REDIS_ENABLED=1
      - VIKUNJA_REDIS_HOST=redis-vikunja:6379
      - VIKUNJA_CACHE_ENABLED=1
      - VIKUNJA_CACHE_TYPE=redis
    ports:
      - 3456:3456
    mem_limit: 1024m

  - name: vikunja-frontend
    enabled_on: docker
    image: vikunja/frontend:0.20.5
    ports:
      - 8000:80
    mem_limit: 1024m

  - name: postgres-vikunja
    enabled_on: docker
    image: postgres:15.3-alpine
    environment:
      - POSTGRES_PASSWORD={{ secret_postgres_vikunja_password }}
      - POSTGRES_USER=vikunja
    volumes:
      - "{{ appdata_path }}/postgres-vikunja:/var/lib/postgresql/data"
    mem_limit: 256m

  - name: redis-vikunja
    enabled_on: docker
    image: redis:7.0.11-alpine
    mem_limit: 1024m

  - name: miniflux
    enabled_on: docker
    image: miniflux/miniflux:2.0.44
    depends_on:
      - postgres-miniflux
    environment:
      - DATABASE_URL=postgres://miniflux:{{ secret_postgres_miniflux_password }}@postgres-miniflux/miniflux?sslmode=disable
      - RUN_MIGRATIONS=1
      - CREATE_ADMIN=1
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD={{ secret_miniflux_admin_password }}
    ports:
      - 8001:8080
    healthcheck:
      test: ["CMD", "/usr/bin/miniflux", "-healthcheck", "auto"]
    mem_limit: 1024m

  - name: postgres-miniflux
    enabled_on: docker
    image: postgres:15.3-alpine
    environment:
      - POSTGRES_PASSWORD={{ secret_postgres_miniflux_password }}
      - POSTGRES_USER=miniflux
    volumes:
      - "{{ appdata_path }}/postgres-miniflux:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "miniflux"]
      interval: 10s
      start_period: 30s
    mem_limit: 256m
